swagger: '2.0'
info:
  title: CMS API
  description: API documentation for CMS project
  version: v1
host: 127.0.0.1:8000
schemes:
- http
basePath: /api/v1
consumes:
- application/json
produces:
- application/json
securityDefinitions:
  Basic:
    type: basic
security:
- Basic: []
paths:
  /assignments/create/:
    post:
      operationId: assignments_create_create
      summary: Create a new assignment for a lecture
      description: |2

        ## Endpoint Description
        Allows a teacher enrolled in a course to create a new assignment for a specific lecture.

        ## Path Parameters
        - None

        ## Query Parameters
        - None

        ## Request Body
        - JSON object containing:
            - lecture: integer, required (ID of the lecture)
            - title: string, required (Assignment title)
            - description: string, optional (Assignment description)

        ## Responses
        - **201 Created**: Assignment successfully created
        - **400 Bad Request**: Missing required fields
        - **403 Forbidden**: User is not a teacher or not enrolled in the course
        - **404 Not Found**: Lecture does not exist
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Assignment'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Assignment'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - assignments
    parameters: []
  /assignments/lecture/{lecture_id}/:
    get:
      operationId: assignments_lecture_read
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Assignment'
      tags:
      - assignments
    parameters:
    - name: lecture_id
      in: path
      required: true
      type: string
  /assignments/{id}/:
    get:
      operationId: assignments_read
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Assignment'
      tags:
      - assignments
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this assignment.
      required: true
      type: integer
  /assignments/{id}/delete/:
    delete:
      operationId: assignments_delete_delete
      summary: Delete an assignment
      description: |2

        ## Endpoint Description
        Allows a teacher to delete an assignment from a lecture.

        ## Path Parameters
        - pk: integer, required (Assignment ID)

        ## Query Parameters
        - None

        ## Request Body
        - None

        ## Responses
        - **204 No Content**: Assignment successfully deleted
        - **403 Forbidden**: User is not a teacher or not enrolled in the course
        - **404 Not Found**: Assignment does not exist
      parameters: []
      responses:
        '204':
          description: Assignment deleted
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - assignments
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this assignment.
      required: true
      type: integer
  /assignments/{id}/update/:
    put:
      operationId: assignments_update_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Assignment'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Assignment'
      tags:
      - assignments
    patch:
      operationId: assignments_update_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Assignment'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Assignment'
      tags:
      - assignments
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this assignment.
      required: true
      type: integer
  /auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/TokenObtainPair'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/TokenObtainPair'
      tags:
      - auth
    parameters: []
  /auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/TokenRefresh'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/TokenRefresh'
      tags:
      - auth
    parameters: []
  /auth/register/:
    post:
      operationId: auth_register_create
      summary: Register a new user
      description: |2

        ## Endpoint Description
        Creates a new user in the system.

        ## Path Parameters
        - None

        ## Query Parameters
        - None

        ## Request Body
        - JSON object containing:
            - first_name: string, required
            - last_name: string, required
            - email: string, required
            - password: string, required
            - role: string, optional

        ## Responses
        - **201 Created**: User successfully created
        - **400 Bad Request**: Validation errors in the request body
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserRegistration'
      responses:
        '201':
          description: User created successfully
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: User created successfully
        '400':
          description: Validation error
          schema:
            type: object
            example:
              first_name:
              - This field is required.
      tags:
      - users
    parameters: []
  /comments/create/:
    post:
      operationId: comments_create_create
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Comment'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Comment'
      tags:
      - comments
    parameters: []
  /comments/{id}/delete/:
    delete:
      operationId: comments_delete_delete
      summary: Delete a comment
      description: |2

        ## Endpoint Description
        Allows the owner of a comment to delete it.

        ## Path Parameters
        - pk: integer, required (ID of the comment)

        ## Query Parameters
        - None

        ## Request Body
        - None

        ## Responses
        - **204 No Content**: Comment successfully deleted
        - **403 Forbidden**: User is not the owner of the comment
        - **404 Not Found**: Comment does not exist
      parameters: []
      responses:
        '204':
          description: Comment deleted
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - comments
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this comment.
      required: true
      type: integer
  /comments/{id}/update/:
    put:
      operationId: comments_update_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Comment'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Comment'
      tags:
      - comments
    patch:
      operationId: comments_update_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Comment'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Comment'
      tags:
      - comments
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this comment.
      required: true
      type: integer
  /courses/:
    get:
      operationId: courses_list
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/CourseDetail'
      tags:
      - courses
    parameters: []
  /courses/create/:
    post:
      operationId: courses_create_create
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Course'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Course'
      tags:
      - courses
    parameters: []
  /courses/enroll/:
    post:
      operationId: courses_enroll_create
      summary: Enroll a user in a course
      description: |2

        ## Endpoint Description
        Allows a teacher to enroll a specific user (student or another teacher) into a course.

        ## Path Parameters
        - None

        ## Query Parameters
        - None

        ## Request Body
        - JSON object containing:
            - course_id: integer, required (ID of the course to enroll in)
            - user_id: integer, required (ID of the user to enroll)

        ## Responses
        - **201 Created**: User successfully enrolled
        - **400 Bad Request**: Missing required fields or user is already enrolled
        - **403 Forbidden**: User is not a teacher or not enrolled in the course they are trying to manage
        - **404 Not Found**: Course or user does not exist
      parameters:
      - name: data
        in: body
        required: true
        schema:
          required:
          - course_id
          - user_id
          type: object
          properties:
            course_id:
              type: integer
            user_id:
              type: integer
          example:
            course_id: 1
            user_id: 5
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Enrollment'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - courses
    parameters: []
  /courses/unenroll/:
    delete:
      operationId: courses_unenroll_delete
      summary: Unenroll a user from a course
      description: |2

        ## Endpoint Description
        Allows a teacher to unenroll a user from a course.

        ## Path Parameters
        - None

        ## Query Parameters
        - None

        ## Request Body
        - JSON object containing:
            - course_id: integer, required (ID of the course to unenroll from)
            - user_id: integer, required (ID of the user to unenroll)

        ## Responses
        - **200 OK**: User successfully unenrolled
        - **400 Bad Request**: Missing required fields or course owner cannot be unenrolled
        - **403 Forbidden**: User is not a teacher or not enrolled in the course they are trying to manage
        - **404 Not Found**: Course or enrollment does not exist
      parameters:
      - name: data
        in: body
        required: true
        schema:
          required:
          - course_id
          - user_id
          type: object
          properties:
            course_id:
              type: integer
            user_id:
              type: integer
          example:
            course_id: 1
            user_id: 5
      responses:
        '200':
          description: User unenrolled
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - courses
    parameters: []
  /courses/{id}/:
    get:
      operationId: courses_read
      summary: Retrieve a course
      description: |2

        ## Endpoint Description
        Allows an enrolled user to retrieve the details of a specific course.

        ## Path Parameters
        - pk: integer, required (Course ID)

        ## Query Parameters
        - None

        ## Request Body
        - None

        ## Responses
        - **200 OK**: Returns course details
        - **403 Forbidden**: User is not enrolled in the course
        - **404 Not Found**: Course does not exist
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/CourseDetail'
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - courses
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this course.
      required: true
      type: integer
  /courses/{id}/delete/:
    delete:
      operationId: courses_delete_delete
      summary: Delete a course
      description: |2

        ## Endpoint Description
        Allows the owner of a course to delete it.

        ## Path Parameters
        - pk: integer, required (Course ID)

        ## Query Parameters
        - None

        ## Request Body
        - None

        ## Responses
        - **204 No Content**: Course successfully deleted
        - **403 Forbidden**: User is not the course owner or not a teacher
        - **404 Not Found**: Course does not exist
      parameters: []
      responses:
        '204':
          description: Course deleted
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - courses
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this course.
      required: true
      type: integer
  /courses/{id}/update/:
    put:
      operationId: courses_update_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Course'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Course'
      tags:
      - courses
    patch:
      operationId: courses_update_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Course'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Course'
      tags:
      - courses
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this course.
      required: true
      type: integer
  /grades/create/:
    post:
      operationId: grades_create_create
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Grade'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Grade'
      tags:
      - grades
    parameters: []
  /grades/{id}/:
    get:
      operationId: grades_read
      summary: Retrieve a grade
      description: |2

        ## Endpoint Description
        Allows a student to view their own grade or a teacher to view a grade for a course they are enrolled in.

        ## Path Parameters
        - pk: integer, required (grade ID)

        ## Query Parameters
        - None

        ## Request Body
        - None

        ## Responses
        - **200 OK**: Returns grade details
        - **403 Forbidden**: Access denied
        - **404 Not Found**: Grade does not exist
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Grade'
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - grades
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this grade.
      required: true
      type: integer
  /grades/{id}/delete/:
    delete:
      operationId: grades_delete_delete
      description: ''
      parameters: []
      responses:
        '204':
          description: ''
      tags:
      - grades
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this grade.
      required: true
      type: integer
  /grades/{id}/update/:
    put:
      operationId: grades_update_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Grade'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Grade'
      tags:
      - grades
    patch:
      operationId: grades_update_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Grade'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Grade'
      tags:
      - grades
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this grade.
      required: true
      type: integer
  /lectures/:
    get:
      operationId: lectures_list
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Lecture'
      tags:
      - lectures
    parameters: []
  /lectures/course/{course_id}/:
    get:
      operationId: lectures_course_read
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Lecture'
      tags:
      - lectures
    parameters:
    - name: course_id
      in: path
      required: true
      type: string
  /lectures/create/:
    post:
      operationId: lectures_create_create
      summary: Create a new lecture
      description: |2

        ## Endpoint Description
        Allows a teacher to create a new lecture within a course.

        ## Path Parameters
        - None

        ## Query Parameters
        - None

        ## Request Body
        - JSON object containing:
            - course: integer, required (course ID)
            - topic: string, required (lecture topic)
            - file: file, required (lecture file)

        ## Responses
        - **201 Created**: Lecture successfully created
        - **400 Bad Request**: Missing required fields
        - **403 Forbidden**: User not enrolled in the course as a teacher
        - **404 Not Found**: Course does not exist
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Lecture'
      responses:
        '201':
          description: Lecture created
          schema:
            type: object
            properties:
              id:
                type: integer
              course:
                type: integer
              topic:
                type: string
              file:
                type: string
            example:
              id: 1
              course: 1
              topic: Introduction to DRF
              file: http://example.com/media/lectures/lecture1.pdf
        '400':
          description: Missing required fields
        '403':
          description: User not enrolled as a teacher
        '404':
          description: Course not found
      tags:
      - lectures
    parameters: []
  /lectures/{id}/:
    get:
      operationId: lectures_read
      summary: Retrieve a lecture
      description: |2

        ## Endpoint Description
        Allows an enrolled user to retrieve the details of a specific lecture.

        ## Path Parameters
        - pk: integer, required (lecture ID)

        ## Query Parameters
        - None

        ## Request Body
        - None

        ## Responses
        - **200 OK**: Returns lecture details
        - **403 Forbidden**: User not enrolled in the course
        - **404 Not Found**: Lecture does not exist
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Lecture'
        '403':
          description: User not enrolled in the course
        '404':
          description: Not Found
      tags:
      - lectures
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this lecture.
      required: true
      type: integer
  /lectures/{id}/delete/:
    delete:
      operationId: lectures_delete_delete
      description: ''
      parameters: []
      responses:
        '204':
          description: ''
      tags:
      - lectures
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this lecture.
      required: true
      type: integer
  /lectures/{id}/update/:
    put:
      operationId: lectures_update_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Lecture'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Lecture'
      tags:
      - lectures
    patch:
      operationId: lectures_update_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Lecture'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Lecture'
      tags:
      - lectures
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this lecture.
      required: true
      type: integer
  /submissions/:
    get:
      operationId: submissions_list
      summary: List submissions
      description: |2

        ## Endpoint Description
        Lists submissions visible to the current user.

        - Students see only their own submissions.
        - Teachers see submissions for courses they are enrolled in.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Submission'
      tags:
      - submissions
    parameters: []
  /submissions/create/:
    post:
      operationId: submissions_create_create
      summary: Create a submission
      description: |2

        ## Endpoint Description
        Allows a student to submit work for an assignment.

        ## Path Parameters
        - None

        ## Query Parameters
        - None

        ## Request Body
        - JSON object containing:
            - assignment: integer, required (assignment ID)
            - content: string, required (submission content)

        ## Responses
        - **201 Created**: Submission successfully created
        - **400 Bad Request**: Validation errors
        - **403 Forbidden**: User not enrolled in the course of the assignment
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Submission'
      responses:
        '201':
          description: Submission created
          schema:
            type: object
            properties:
              id:
                type: integer
              assignment:
                type: integer
              user:
                type: integer
              content:
                type: string
            example:
              id: 1
              assignment: 3
              user: 5
              content: My submission content
        '400':
          description: Validation error
        '403':
          description: User not enrolled in course
      tags:
      - submissions
    parameters: []
  /submissions/{id}/:
    get:
      operationId: submissions_read
      summary: Retrieve a submission
      description: |2

        ## Endpoint Description
        Retrieve a specific submission by its ID.

        ## Path Parameters
        - pk: integer, required (submission ID)

        ## Query Parameters
        - None

        ## Request Body
        - None

        ## Responses
        - **200 OK**: Returns submission details
        - **404 Not Found**: Submission does not exist
        - **403 Forbidden**: Access denied
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Submission'
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - submissions
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this submission.
      required: true
      type: integer
  /submissions/{submission_id}/comments/:
    get:
      operationId: submissions_comments_list
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
      tags:
      - submissions
    parameters:
    - name: submission_id
      in: path
      required: true
      type: string
definitions:
  Assignment:
    required:
    - title
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      title:
        title: Title
        type: string
        maxLength: 255
        minLength: 1
      description:
        title: Description
        type: string
  TokenObtainPair:
    required:
    - email
    - password
    type: object
    properties:
      email:
        title: Email
        type: string
        minLength: 1
      password:
        title: Password
        type: string
        minLength: 1
  TokenRefresh:
    required:
    - refresh
    type: object
    properties:
      refresh:
        title: Refresh
        type: string
        minLength: 1
      access:
        title: Access
        type: string
        readOnly: true
        minLength: 1
  UserRegistration:
    required:
    - first_name
    - last_name
    - email
    - password
    - role
    type: object
    properties:
      first_name:
        title: First name
        type: string
        maxLength: 255
        minLength: 1
      last_name:
        title: Last name
        type: string
        maxLength: 255
        minLength: 1
      email:
        title: Email
        type: string
        format: email
        maxLength: 254
        minLength: 1
      password:
        title: Password
        type: string
        minLength: 1
      role:
        title: Role
        type: string
        enum:
        - student
        - teacher
  Comment:
    required:
    - submission
    - content
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      submission:
        title: Submission
        type: integer
      user:
        title: User
        type: string
        readOnly: true
      content:
        title: Content
        type: string
        minLength: 1
  Lecture:
    required:
    - course
    - topic
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      course:
        title: Course
        type: integer
      topic:
        title: Topic
        type: string
        maxLength: 255
        minLength: 1
      file:
        title: File
        type: string
        readOnly: true
        format: uri
      assignments:
        type: array
        items:
          type: integer
        readOnly: true
        uniqueItems: true
  CourseDetail:
    required:
    - title
    - description
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      title:
        title: Title
        type: string
        maxLength: 255
        minLength: 1
      description:
        title: Description
        type: string
        minLength: 1
      owner:
        title: Owner
        type: integer
        x-nullable: true
      lectures:
        type: array
        items:
          $ref: '#/definitions/Lecture'
        readOnly: true
      teachers:
        title: Teachers
        type: string
        readOnly: true
      students:
        title: Students
        type: string
        readOnly: true
  Course:
    required:
    - title
    - description
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      title:
        title: Title
        type: string
        maxLength: 255
        minLength: 1
      description:
        title: Description
        type: string
        minLength: 1
      owner:
        title: Owner
        type: string
        readOnly: true
  User:
    required:
    - first_name
    - last_name
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      first_name:
        title: First name
        type: string
        maxLength: 255
        minLength: 1
      last_name:
        title: Last name
        type: string
        maxLength: 255
        minLength: 1
      email:
        title: Email
        type: string
        format: email
        readOnly: true
        minLength: 1
      role:
        title: Role
        type: string
        enum:
        - student
        - teacher
        readOnly: true
  Enrollment:
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      user:
        $ref: '#/definitions/User'
      course:
        $ref: '#/definitions/Course'
  Grade:
    required:
    - submission
    - score
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      submission:
        title: Submission
        type: integer
      teacher:
        title: Teacher
        type: integer
        readOnly: true
      score:
        title: Score
        type: integer
        maximum: 100
        minimum: 0
  Submission:
    required:
    - assignment
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      user:
        title: User
        type: integer
        readOnly: true
      assignment:
        title: Assignment
        type: integer
      file:
        title: File
        type: string
        readOnly: true
        format: uri
